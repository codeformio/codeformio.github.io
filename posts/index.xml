<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on &gt; codeform</title>
    <link>https://codeform.io/posts/</link>
    <description>Recent content in Posts on &gt; codeform</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://codeform.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started with Cloud Init</title>
      <link>https://codeform.io/posts/getting-started-with-cloud-init/</link>
      <pubDate>Wed, 30 Oct 2019 10:30:00 -0400</pubDate>
      
      <guid>https://codeform.io/posts/getting-started-with-cloud-init/</guid>
      <description>In this guide we are going to use cloud-init to bootstrap an apache server on AWS EC2.
Introduction Cloud init is a service that comes installed on newer OS distributions. It is able to consume cloud-config files and execute them during the very first boot of a server. Cloud-config files use a declarative syntax (YAML format) to specify common configuration tasks such as:
 Configuring SSH keys Settting up trusted CA certs Define users Run scripts etc.</description>
    </item>
    
    <item>
      <title>Notes on the Google Cloud Architect Certification</title>
      <link>https://codeform.io/posts/google-cloud-architect-certification-notes/</link>
      <pubDate>Mon, 20 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://codeform.io/posts/google-cloud-architect-certification-notes/</guid>
      <description>When Google Cloud launched their Kubernetes platform (GKE) back in 2015 I signed up for the free trial. Today my free credits are long gone, but I still run and launch new clusters on a weekly basis. After putting it off for a while, I recently decided to formalize my experience by getting the GCP Architect certification. In this post I detail some of the resources I used to prepare for the exam.</description>
    </item>
    
    <item>
      <title>Simple Golang Retry Function</title>
      <link>https://codeform.io/posts/simple-golang-retry-function/</link>
      <pubDate>Mon, 29 May 2017 09:54:15 -0400</pubDate>
      
      <guid>https://codeform.io/posts/simple-golang-retry-function/</guid>
      <description>Adding retry policies in your software is an easy way to increase resiliency. This is especially useful when making HTTP requests or doing anything else that has to reach out across the network.
If at first you donâ€™t succeed, try, try again. In go code, that translates to:
func retry(attempts int, sleep time.Duration, fn func() error) error { if err := fn(); err != nil { if s, ok := err.</description>
    </item>
    
    <item>
      <title>Go: Wrapping http.ResponseWriter with Middleware</title>
      <link>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</link>
      <pubDate>Tue, 06 Jun 2017 10:37:14 -0400</pubDate>
      
      <guid>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</guid>
      <description>Using middleware provides a clean way to reduce code duplication when handling HTTP requests in Go. By utilizing the standard handler signature, func(w http.ResponseWriter, r *http.Request) we can write functions that are easily dropped into any Go web service. One of the most common uses of middleware is to provide request/response logging. In order to log responses we will need to capture the status code that was written by a nested handler.</description>
    </item>
    
  </channel>
</rss>
