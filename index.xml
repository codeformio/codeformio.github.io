<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intro on &gt; codeform</title>
    <link>https://codeform.io/</link>
    <description>Recent content in Intro on &gt; codeform</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://codeform.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Repositories</title>
      <link>https://codeform.io/docs/cloud-native-handbook/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codeform.io/docs/cloud-native-handbook/repositories/</guid>
      <description>Repositories When building on top of a cloud native platform all code and configuration should be version controlled. In Kubernetes, all deployment events are merely a result of updating a configuration file (referred to here as a Kubernetes manifest). Since all changes to code and config must be version controlled, we will use our repository as the origin of all changes to running software. This process is known as GitOps.</description>
    </item>
    
    <item>
      <title>Development</title>
      <link>https://codeform.io/docs/cloud-native-handbook/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codeform.io/docs/cloud-native-handbook/development/</guid>
      <description>Development All development should occur in a &amp;ldquo;code repo&amp;rdquo;. This is a repository where the sole purpose is to produce deployable software. In the cloud native world, this means the goal is to push container images to a registry.
Branching Strategy The branching strategy described here mirrors oneflow. We feel like it is a good fit for most teams. A single long-lived branch keeps merging simple. Git tagging triggers container image tagging.</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://codeform.io/docs/cloud-native-handbook/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codeform.io/docs/cloud-native-handbook/deployment/</guid>
      <description>Deployment Since Kubernetes is a declarative system, the act of deploying software translates to pushing Kubernetes configuration manifests into a cluster. These manifests contain descriptions of applications that should be running (what container image, how many replicas, any environment variables, dns names, etc). The cluster will then work to make sure what was declared becomes a reality.
Branching Strategy All manifests should be version controlled in a git repository (referred to here as a config repo).</description>
    </item>
    
    <item>
      <title>Exercise: Deploying</title>
      <link>https://codeform.io/docs/cloud-native-handbook/exercise-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codeform.io/docs/cloud-native-handbook/exercise-deploy/</guid>
      <description>Exercise - Deploying Stuff to Kubernetes Prereqs Make sure you have the following tools installed and up to date:
  docker - For building containers and running k8s with kind.  kind - For creating local k8s clusters.  kubectl - For interacting with k8s.  kustomize - For templating k8s manifests.  Setup Define the environment.
export ENV=non-prod export CLUSTER=non-east-a Create a local cluster representing this environment.
kind create cluster --name $CLUSTER Bootstrap the Cluster Install the GitOps engine.</description>
    </item>
    
    <item>
      <title>Teams</title>
      <link>https://codeform.io/docs/cloud-native-handbook/teams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codeform.io/docs/cloud-native-handbook/teams/</guid>
      <description>Teams Delegation of Resource Management When organizing teams and processes, it helps to think of Kubernetes manifests as either application or cluster related:
  Application-related manifests are namespaced, some common ones being:
 Deployment (What container should be running) Service (Service discovery / cluster DNS) ConfigMap (Define application confiuration files and env vars)    Some examples of cluster-concerns / administrative manifests include:
 Namespace (A group of other resources) ResourceLimit (How much cpu/memory can be used in a Namespace) NetworkPolicy (What apps can talk to eachother) ClusterRole/ClusterRoleBinding (Access control, what k8s users can see/do)    Typically, cluster operations teams have the ability to manage what namespaces (and associated restrictions) exist.</description>
    </item>
    
    <item>
      <title>Getting Started with Cloud Init</title>
      <link>https://codeform.io/posts/getting-started-with-cloud-init/</link>
      <pubDate>Wed, 30 Oct 2019 10:30:00 -0400</pubDate>
      
      <guid>https://codeform.io/posts/getting-started-with-cloud-init/</guid>
      <description>In this guide we are going to use cloud-init to bootstrap an apache server on AWS EC2.
Introduction Cloud init is a service that comes installed on newer OS distributions. It is able to consume cloud-config files and execute them during the very first boot of a server. Cloud-config files use a declarative syntax (YAML format) to specify common configuration tasks such as:
 Configuring SSH keys Settting up trusted CA certs Define users Run scripts etc.</description>
    </item>
    
    <item>
      <title>Notes on the Google Cloud Architect Certification</title>
      <link>https://codeform.io/posts/google-cloud-architect-certification-notes/</link>
      <pubDate>Mon, 20 May 2019 10:30:00 -0400</pubDate>
      
      <guid>https://codeform.io/posts/google-cloud-architect-certification-notes/</guid>
      <description>When Google Cloud launched their Kubernetes platform (GKE) back in 2015 I signed up for the free trial. Today my free credits are long gone, but I still run and launch new clusters on a weekly basis. After putting it off for a while, I recently decided to formalize my experience by getting the GCP Architect certification. In this post I detail some of the resources I used to prepare for the exam.</description>
    </item>
    
    <item>
      <title>Simple Golang Retry Function</title>
      <link>https://codeform.io/posts/simple-golang-retry-function/</link>
      <pubDate>Mon, 29 May 2017 09:54:15 -0400</pubDate>
      
      <guid>https://codeform.io/posts/simple-golang-retry-function/</guid>
      <description>Adding retry policies in your software is an easy way to increase resiliency. This is especially useful when making HTTP requests or doing anything else that has to reach out across the network.
If at first you donâ€™t succeed, try, try again. In go code, that translates to:
func retry(attempts int, sleep time.Duration, fn func() error) error { if err := fn(); err != nil { if s, ok := err.</description>
    </item>
    
    <item>
      <title>Go: Wrapping http.ResponseWriter with Middleware</title>
      <link>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</link>
      <pubDate>Tue, 06 Jun 2017 10:37:14 -0400</pubDate>
      
      <guid>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</guid>
      <description>Using middleware provides a clean way to reduce code duplication when handling HTTP requests in Go. By utilizing the standard handler signature, func(w http.ResponseWriter, r *http.Request) we can write functions that are easily dropped into any Go web service. One of the most common uses of middleware is to provide request/response logging. In order to log responses we will need to capture the status code that was written by a nested handler.</description>
    </item>
    
  </channel>
</rss>