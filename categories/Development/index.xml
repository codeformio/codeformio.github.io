<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on &gt; codeform</title>
    <link>https://codeform.io/categories/Development/</link>
    <description>Recent content in Development on &gt; codeform</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 06 Jun 2017 10:37:14 -0400</lastBuildDate><atom:link href="https://codeform.io/categories/Development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple Golang Retry Function</title>
      <link>https://codeform.io/posts/simple-golang-retry-function/</link>
      <pubDate>Mon, 29 May 2017 09:54:15 -0400</pubDate>
      
      <guid>https://codeform.io/posts/simple-golang-retry-function/</guid>
      <description>Adding retry policies in your software is an easy way to increase resiliency. This is especially useful when making HTTP requests or doing anything else that has to reach out across the network.
If at first you donâ€™t succeed, try, try again. In go code, that translates to:
func retry(attempts int, sleep time.Duration, fn func() error) error { if err := fn(); err != nil { if s, ok := err.</description>
    </item>
    
    <item>
      <title>Go: Wrapping http.ResponseWriter with Middleware</title>
      <link>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</link>
      <pubDate>Tue, 06 Jun 2017 10:37:14 -0400</pubDate>
      
      <guid>https://codeform.io/posts/golang-wrapping-http-response-writer-for-middleware/</guid>
      <description>Using middleware provides a clean way to reduce code duplication when handling HTTP requests in Go. By utilizing the standard handler signature, func(w http.ResponseWriter, r *http.Request) we can write functions that are easily dropped into any Go web service. One of the most common uses of middleware is to provide request/response logging. In order to log responses we will need to capture the status code that was written by a nested handler.</description>
    </item>
    
  </channel>
</rss>
